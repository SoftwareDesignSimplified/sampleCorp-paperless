// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: purchase_order_items.sql

package db

import (
	"context"
)

const createPurchaseOrderItem = `-- name: CreatePurchaseOrderItem :one
INSERT INTO purchase_order_items (
    description,
    part_no,
    uom,
    qty,
    item_price,
    discount,
    net_price,
    net_value,
    currency,
    purchase_order_id
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
         ) RETURNING id, description, part_no, uom, qty, item_price, discount, net_price, net_value, currency, purchase_order_id
`

type CreatePurchaseOrderItemParams struct {
	Description     string  `json:"description"`
	PartNo          string  `json:"part_no"`
	Uom             string  `json:"uom"`
	Qty             int32   `json:"qty"`
	ItemPrice       float64 `json:"item_price"`
	Discount        float64 `json:"discount"`
	NetPrice        float64 `json:"net_price"`
	NetValue        float64 `json:"net_value"`
	Currency        string  `json:"currency"`
	PurchaseOrderID int32   `json:"purchase_order_id"`
}

func (q *Queries) CreatePurchaseOrderItem(ctx context.Context, arg CreatePurchaseOrderItemParams) (PurchaseOrderItem, error) {
	row := q.db.QueryRow(ctx, createPurchaseOrderItem,
		arg.Description,
		arg.PartNo,
		arg.Uom,
		arg.Qty,
		arg.ItemPrice,
		arg.Discount,
		arg.NetPrice,
		arg.NetValue,
		arg.Currency,
		arg.PurchaseOrderID,
	)
	var i PurchaseOrderItem
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.PartNo,
		&i.Uom,
		&i.Qty,
		&i.ItemPrice,
		&i.Discount,
		&i.NetPrice,
		&i.NetValue,
		&i.Currency,
		&i.PurchaseOrderID,
	)
	return i, err
}

const getPurchaseOrderItemsByPurchaseOrderID = `-- name: GetPurchaseOrderItemsByPurchaseOrderID :many
SELECT id, description, part_no, uom, qty, item_price, discount, net_price, net_value, currency, purchase_order_id
FROM purchase_order_items
WHERE purchase_order_id = $1
`

func (q *Queries) GetPurchaseOrderItemsByPurchaseOrderID(ctx context.Context, purchaseOrderID int32) ([]PurchaseOrderItem, error) {
	rows, err := q.db.Query(ctx, getPurchaseOrderItemsByPurchaseOrderID, purchaseOrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseOrderItem{}
	for rows.Next() {
		var i PurchaseOrderItem
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.PartNo,
			&i.Uom,
			&i.Qty,
			&i.ItemPrice,
			&i.Discount,
			&i.NetPrice,
			&i.NetValue,
			&i.Currency,
			&i.PurchaseOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPurchaseOrderItemsByPurchaseOrderID = `-- name: ListPurchaseOrderItemsByPurchaseOrderID :many
SELECT id, description, part_no, uom, qty, item_price, discount, net_price, net_value, currency, purchase_order_id FROM purchase_order_items WHERE purchase_order_id = $1
`

func (q *Queries) ListPurchaseOrderItemsByPurchaseOrderID(ctx context.Context, purchaseOrderID int32) ([]PurchaseOrderItem, error) {
	rows, err := q.db.Query(ctx, listPurchaseOrderItemsByPurchaseOrderID, purchaseOrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseOrderItem{}
	for rows.Next() {
		var i PurchaseOrderItem
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.PartNo,
			&i.Uom,
			&i.Qty,
			&i.ItemPrice,
			&i.Discount,
			&i.NetPrice,
			&i.NetValue,
			&i.Currency,
			&i.PurchaseOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePurchaseOrderItem = `-- name: UpdatePurchaseOrderItem :one
UPDATE purchase_order_items
SET
    description = COALESCE($1, description),
    part_no = COALESCE($2, part_no),
    uom = COALESCE($3, uom),
    qty = COALESCE($4, qty),
    item_price = COALESCE($5, item_price),
    discount = COALESCE($6, discount),
    net_price = COALESCE($7, net_price),
    net_value = COALESCE($8, net_value),
    currency = COALESCE($9, currency),
    purchase_order_id = COALESCE($10, purchase_order_id)
WHERE
        id = $11
RETURNING id, description, part_no, uom, qty, item_price, discount, net_price, net_value, currency, purchase_order_id
`

type UpdatePurchaseOrderItemParams struct {
	Description     string  `json:"description"`
	PartNo          string  `json:"part_no"`
	Uom             string  `json:"uom"`
	Qty             int32   `json:"qty"`
	ItemPrice       float64 `json:"item_price"`
	Discount        float64 `json:"discount"`
	NetPrice        float64 `json:"net_price"`
	NetValue        float64 `json:"net_value"`
	Currency        string  `json:"currency"`
	PurchaseOrderID int32   `json:"purchase_order_id"`
	ID              int32   `json:"id"`
}

func (q *Queries) UpdatePurchaseOrderItem(ctx context.Context, arg UpdatePurchaseOrderItemParams) (PurchaseOrderItem, error) {
	row := q.db.QueryRow(ctx, updatePurchaseOrderItem,
		arg.Description,
		arg.PartNo,
		arg.Uom,
		arg.Qty,
		arg.ItemPrice,
		arg.Discount,
		arg.NetPrice,
		arg.NetValue,
		arg.Currency,
		arg.PurchaseOrderID,
		arg.ID,
	)
	var i PurchaseOrderItem
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.PartNo,
		&i.Uom,
		&i.Qty,
		&i.ItemPrice,
		&i.Discount,
		&i.NetPrice,
		&i.NetValue,
		&i.Currency,
		&i.PurchaseOrderID,
	)
	return i, err
}
