// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: invoice_items.sql

package db

import (
	"context"
)

const createInvoiceItem = `-- name: CreateInvoiceItem :one
 INSERT INTO invoice_items (description, uom, qty, unit_price, net_price, currency, invoice_id)
 VALUES ($1, $2, $3, $4, $5, $6, $7)
 RETURNING id, description, uom, qty, unit_price, net_price, currency, invoice_id
`

type CreateInvoiceItemParams struct {
	Description string  `json:"description"`
	Uom         string  `json:"uom"`
	Qty         int32   `json:"qty"`
	UnitPrice   float64 `json:"unit_price"`
	NetPrice    float64 `json:"net_price"`
	Currency    string  `json:"currency"`
	InvoiceID   int32   `json:"invoice_id"`
}

func (q *Queries) CreateInvoiceItem(ctx context.Context, arg CreateInvoiceItemParams) (InvoiceItem, error) {
	row := q.db.QueryRow(ctx, createInvoiceItem,
		arg.Description,
		arg.Uom,
		arg.Qty,
		arg.UnitPrice,
		arg.NetPrice,
		arg.Currency,
		arg.InvoiceID,
	)
	var i InvoiceItem
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Uom,
		&i.Qty,
		&i.UnitPrice,
		&i.NetPrice,
		&i.Currency,
		&i.InvoiceID,
	)
	return i, err
}

const getInvoiceItemsByInvoiceID = `-- name: GetInvoiceItemsByInvoiceID :many
 SELECT id, description, uom, qty, unit_price, net_price, currency, invoice_id
 FROM invoice_items
 WHERE invoice_id = $1
`

func (q *Queries) GetInvoiceItemsByInvoiceID(ctx context.Context, invoiceID int32) ([]InvoiceItem, error) {
	rows, err := q.db.Query(ctx, getInvoiceItemsByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceItem{}
	for rows.Next() {
		var i InvoiceItem
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Uom,
			&i.Qty,
			&i.UnitPrice,
			&i.NetPrice,
			&i.Currency,
			&i.InvoiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoiceItemsByInvoiceID = `-- name: ListInvoiceItemsByInvoiceID :many
 SELECT id, description, uom, qty, unit_price, net_price, currency, invoice_id
 FROM invoice_items
 WHERE invoice_id = $1
`

func (q *Queries) ListInvoiceItemsByInvoiceID(ctx context.Context, invoiceID int32) ([]InvoiceItem, error) {
	rows, err := q.db.Query(ctx, listInvoiceItemsByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceItem{}
	for rows.Next() {
		var i InvoiceItem
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Uom,
			&i.Qty,
			&i.UnitPrice,
			&i.NetPrice,
			&i.Currency,
			&i.InvoiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
