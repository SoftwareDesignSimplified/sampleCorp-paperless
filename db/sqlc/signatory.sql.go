// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: signatory.sql

package db

import (
	"context"
)

const createSignatory = `-- name: CreateSignatory :one
INSERT INTO signatories (name, title)
VALUES ($1, $2)
RETURNING id, name, title
`

type CreateSignatoryParams struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

func (q *Queries) CreateSignatory(ctx context.Context, arg CreateSignatoryParams) (Signatory, error) {
	row := q.db.QueryRow(ctx, createSignatory, arg.Name, arg.Title)
	var i Signatory
	err := row.Scan(&i.ID, &i.Name, &i.Title)
	return i, err
}

const deleteSignatoryByName = `-- name: DeleteSignatoryByName :exec
DELETE FROM signatories
WHERE name = $1
`

func (q *Queries) DeleteSignatoryByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteSignatoryByName, name)
	return err
}

const getSignatoryById = `-- name: GetSignatoryById :one
SELECT id, name, title FROM signatories
WHERE id = $1
`

func (q *Queries) GetSignatoryById(ctx context.Context, id int64) (Signatory, error) {
	row := q.db.QueryRow(ctx, getSignatoryById, id)
	var i Signatory
	err := row.Scan(&i.ID, &i.Name, &i.Title)
	return i, err
}

const listSignatories = `-- name: ListSignatories :many
SELECT id, name, title FROM signatories LIMIT $1 OFFSET $2
`

type ListSignatoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSignatories(ctx context.Context, arg ListSignatoriesParams) ([]Signatory, error) {
	rows, err := q.db.Query(ctx, listSignatories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Signatory{}
	for rows.Next() {
		var i Signatory
		if err := rows.Scan(&i.ID, &i.Name, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
