// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: bankdetails.sql

package db

import (
	"context"
)

const createBankDetails = `-- name: CreateBankDetails :one
INSERT INTO bank_details (bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id
`

type CreateBankDetailsParams struct {
	BankName      string `json:"bank_name"`
	AccountName   string `json:"account_name"`
	AccountNumber string `json:"account_number"`
	Branch        string `json:"branch"`
	SwiftCode     string `json:"swift_code"`
	Address       string `json:"address"`
	Country       string `json:"country"`
	Currency      string `json:"currency"`
	AccountType   string `json:"account_type"`
	CompanyID     int32  `json:"company_id"`
}

func (q *Queries) CreateBankDetails(ctx context.Context, arg CreateBankDetailsParams) (BankDetail, error) {
	row := q.db.QueryRow(ctx, createBankDetails,
		arg.BankName,
		arg.AccountName,
		arg.AccountNumber,
		arg.Branch,
		arg.SwiftCode,
		arg.Address,
		arg.Country,
		arg.Currency,
		arg.AccountType,
		arg.CompanyID,
	)
	var i BankDetail
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.AccountName,
		&i.AccountNumber,
		&i.Branch,
		&i.SwiftCode,
		&i.Address,
		&i.Country,
		&i.Currency,
		&i.AccountType,
		&i.CompanyID,
	)
	return i, err
}

const getBankDetailsByAccountNumber = `-- name: GetBankDetailsByAccountNumber :one
SELECT id, bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id FROM bank_details WHERE account_number = $1 LIMIT 1
`

func (q *Queries) GetBankDetailsByAccountNumber(ctx context.Context, accountNumber string) (BankDetail, error) {
	row := q.db.QueryRow(ctx, getBankDetailsByAccountNumber, accountNumber)
	var i BankDetail
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.AccountName,
		&i.AccountNumber,
		&i.Branch,
		&i.SwiftCode,
		&i.Address,
		&i.Country,
		&i.Currency,
		&i.AccountType,
		&i.CompanyID,
	)
	return i, err
}

const getBankInfoByID = `-- name: GetBankInfoByID :one
SELECT id, bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id FROM bank_details WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBankInfoByID(ctx context.Context, id int32) (BankDetail, error) {
	row := q.db.QueryRow(ctx, getBankInfoByID, id)
	var i BankDetail
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.AccountName,
		&i.AccountNumber,
		&i.Branch,
		&i.SwiftCode,
		&i.Address,
		&i.Country,
		&i.Currency,
		&i.AccountType,
		&i.CompanyID,
	)
	return i, err
}

const listBankDetailsByBankName = `-- name: ListBankDetailsByBankName :many
SELECT id, bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id FROM bank_details WHERE bank_name = $1
`

func (q *Queries) ListBankDetailsByBankName(ctx context.Context, bankName string) ([]BankDetail, error) {
	rows, err := q.db.Query(ctx, listBankDetailsByBankName, bankName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankDetail{}
	for rows.Next() {
		var i BankDetail
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.AccountName,
			&i.AccountNumber,
			&i.Branch,
			&i.SwiftCode,
			&i.Address,
			&i.Country,
			&i.Currency,
			&i.AccountType,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBanks = `-- name: ListBanks :many
SELECT id, bank_name, account_name, account_number, branch, swift_code, address, country, currency, account_type, company_id FROM bank_details
`

func (q *Queries) ListBanks(ctx context.Context) ([]BankDetail, error) {
	rows, err := q.db.Query(ctx, listBanks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankDetail{}
	for rows.Next() {
		var i BankDetail
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.AccountName,
			&i.AccountNumber,
			&i.Branch,
			&i.SwiftCode,
			&i.Address,
			&i.Country,
			&i.Currency,
			&i.AccountType,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
