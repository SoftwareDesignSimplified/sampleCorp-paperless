// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_roles.sql

package db

import (
	"context"
)

const createUserRoles = `-- name: CreateUserRoles :one
INSERT INTO user_roles (user_id, role_id)values ($1, $2) RETURNING id, user_id, role_id, created_at, terminated_at
`

type CreateUserRolesParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) CreateUserRoles(ctx context.Context, arg CreateUserRolesParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRoles, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.TerminatedAt,
	)
	return i, err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
DELETE FROM user_roles WHERE user_id = $1
`

func (q *Queries) DeleteUserRoles(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUserRoles, userID)
	return err
}

const deleteUserRolesByRole = `-- name: DeleteUserRolesByRole :exec
DELETE FROM user_roles WHERE role_id = $1
`

func (q *Queries) DeleteUserRolesByRole(ctx context.Context, roleID int64) error {
	_, err := q.db.Exec(ctx, deleteUserRolesByRole, roleID)
	return err
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, user_id, role_id, created_at, terminated_at FROM user_roles WHERE user_id = $1 AND role_id = $2
`

type GetUserRoleParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) GetUserRole(ctx context.Context, arg GetUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.TerminatedAt,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, user_id, role_id, created_at, terminated_at FROM user_roles WHERE user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID int64) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoleID,
			&i.CreatedAt,
			&i.TerminatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRoles = `-- name: UpdateUserRoles :one
UPDATE user_roles SET role_id = $2 WHERE user_id = $1 RETURNING id, user_id, role_id, created_at, terminated_at
`

type UpdateUserRolesParams struct {
	UserID int64 `json:"user_id"`
	RoleID int64 `json:"role_id"`
}

func (q *Queries) UpdateUserRoles(ctx context.Context, arg UpdateUserRolesParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateUserRoles, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.TerminatedAt,
	)
	return i, err
}
