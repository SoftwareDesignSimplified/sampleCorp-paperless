// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: company.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name, initials, address)
VALUES ($1, $2, $3)
RETURNING id, name, initials, address
`

type CreateCompanyParams struct {
	Name     string  `json:"name"`
	Initials string  `json:"initials"`
	Address  *string `json:"address"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.Name, arg.Initials, arg.Address)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Initials,
		&i.Address,
	)
	return i, err
}

const deleteCompanyByName = `-- name: DeleteCompanyByName :exec
DELETE FROM companies
WHERE name = $1
`

func (q *Queries) DeleteCompanyByName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteCompanyByName, name)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, initials, address FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Initials,
		&i.Address,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, initials, address FROM companies LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Initials,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
