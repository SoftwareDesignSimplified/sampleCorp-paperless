// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: purchase_order.sql

package db

import (
	"context"
)

const approvePurchaseOrder = `-- name: ApprovePurchaseOrder :one
UPDATE purchase_orders
SET
    po_status = $1,
    approved_by = $2
WHERE
        id = $3
RETURNING id, po_no, date, attn, company_id, address, signatory_id, quotation_id, po_status, approved_by, sent_or_received, pdf_url
`

type ApprovePurchaseOrderParams struct {
	PoStatus   *string `json:"po_status"`
	ApprovedBy *int32  `json:"approved_by"`
	ID         int32   `json:"id"`
}

func (q *Queries) ApprovePurchaseOrder(ctx context.Context, arg ApprovePurchaseOrderParams) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, approvePurchaseOrder, arg.PoStatus, arg.ApprovedBy, arg.ID)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.PoNo,
		&i.Date,
		&i.Attn,
		&i.CompanyID,
		&i.Address,
		&i.SignatoryID,
		&i.QuotationID,
		&i.PoStatus,
		&i.ApprovedBy,
		&i.SentOrReceived,
		&i.PdfUrl,
	)
	return i, err
}

const createPurchaseOrder = `-- name: CreatePurchaseOrder :one
INSERT INTO purchase_orders (attn, company_id, address, signatory_id, quotation_id, sent_or_received)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, po_no, date, attn, company_id, address, signatory_id, quotation_id, po_status, approved_by, sent_or_received, pdf_url
`

type CreatePurchaseOrderParams struct {
	Attn           string  `json:"attn"`
	CompanyID      int32   `json:"company_id"`
	Address        string  `json:"address"`
	SignatoryID    int32   `json:"signatory_id"`
	QuotationID    *int32  `json:"quotation_id"`
	SentOrReceived *string `json:"sent_or_received"`
}

func (q *Queries) CreatePurchaseOrder(ctx context.Context, arg CreatePurchaseOrderParams) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, createPurchaseOrder,
		arg.Attn,
		arg.CompanyID,
		arg.Address,
		arg.SignatoryID,
		arg.QuotationID,
		arg.SentOrReceived,
	)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.PoNo,
		&i.Date,
		&i.Attn,
		&i.CompanyID,
		&i.Address,
		&i.SignatoryID,
		&i.QuotationID,
		&i.PoStatus,
		&i.ApprovedBy,
		&i.SentOrReceived,
		&i.PdfUrl,
	)
	return i, err
}

const getPurchaseOrder = `-- name: GetPurchaseOrder :one
SELECT id, po_no, date, attn, company_id, address, signatory_id, quotation_id, po_status, approved_by, sent_or_received, pdf_url FROM purchase_orders WHERE id = $1
`

func (q *Queries) GetPurchaseOrder(ctx context.Context, id int32) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, getPurchaseOrder, id)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.PoNo,
		&i.Date,
		&i.Attn,
		&i.CompanyID,
		&i.Address,
		&i.SignatoryID,
		&i.QuotationID,
		&i.PoStatus,
		&i.ApprovedBy,
		&i.SentOrReceived,
		&i.PdfUrl,
	)
	return i, err
}

const listPurchaseOrders = `-- name: ListPurchaseOrders :many
SELECT id, po_no, date, attn, company_id, address, signatory_id, quotation_id, po_status, approved_by, sent_or_received, pdf_url FROM purchase_orders  LIMIT $1 OFFSET $2
`

type ListPurchaseOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPurchaseOrders(ctx context.Context, arg ListPurchaseOrdersParams) ([]PurchaseOrder, error) {
	rows, err := q.db.Query(ctx, listPurchaseOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PurchaseOrder{}
	for rows.Next() {
		var i PurchaseOrder
		if err := rows.Scan(
			&i.ID,
			&i.PoNo,
			&i.Date,
			&i.Attn,
			&i.CompanyID,
			&i.Address,
			&i.SignatoryID,
			&i.QuotationID,
			&i.PoStatus,
			&i.ApprovedBy,
			&i.SentOrReceived,
			&i.PdfUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePurchaseOrder = `-- name: UpdatePurchaseOrder :one
UPDATE purchase_orders
SET
    attn = COALESCE($1, attn),
    company_id = COALESCE($2, company_id),
    address = COALESCE($3, address),
    signatory_id = COALESCE($4, signatory_id),
    sent_or_received = COALESCE($5, sent_or_received)
WHERE
        id = $6
RETURNING id, po_no, date, attn, company_id, address, signatory_id, quotation_id, po_status, approved_by, sent_or_received, pdf_url
`

type UpdatePurchaseOrderParams struct {
	Attn           string  `json:"attn"`
	CompanyID      int32   `json:"company_id"`
	Address        string  `json:"address"`
	SignatoryID    int32   `json:"signatory_id"`
	SentOrReceived *string `json:"sent_or_received"`
	ID             int32   `json:"id"`
}

func (q *Queries) UpdatePurchaseOrder(ctx context.Context, arg UpdatePurchaseOrderParams) (PurchaseOrder, error) {
	row := q.db.QueryRow(ctx, updatePurchaseOrder,
		arg.Attn,
		arg.CompanyID,
		arg.Address,
		arg.SignatoryID,
		arg.SentOrReceived,
		arg.ID,
	)
	var i PurchaseOrder
	err := row.Scan(
		&i.ID,
		&i.PoNo,
		&i.Date,
		&i.Attn,
		&i.CompanyID,
		&i.Address,
		&i.SignatoryID,
		&i.QuotationID,
		&i.PoStatus,
		&i.ApprovedBy,
		&i.SentOrReceived,
		&i.PdfUrl,
	)
	return i, err
}
