// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/store.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/qwetu_petro/backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ApprovePaymentRequest mocks base method.
func (m *MockStore) ApprovePaymentRequest(ctx context.Context, arg db.ApprovePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePaymentRequest", ctx, arg)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePaymentRequest indicates an expected call of ApprovePaymentRequest.
func (mr *MockStoreMockRecorder) ApprovePaymentRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePaymentRequest", reflect.TypeOf((*MockStore)(nil).ApprovePaymentRequest), ctx, arg)
}

// ApprovePaymentRequestWithAudit mocks base method.
func (m *MockStore) ApprovePaymentRequestWithAudit(ctx context.Context, userID int32, params db.ApprovePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePaymentRequestWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePaymentRequestWithAudit indicates an expected call of ApprovePaymentRequestWithAudit.
func (mr *MockStoreMockRecorder) ApprovePaymentRequestWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePaymentRequestWithAudit", reflect.TypeOf((*MockStore)(nil).ApprovePaymentRequestWithAudit), ctx, userID, params)
}

// ApprovePettyCash mocks base method.
func (m *MockStore) ApprovePettyCash(ctx context.Context, arg db.ApprovePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePettyCash", ctx, arg)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePettyCash indicates an expected call of ApprovePettyCash.
func (mr *MockStoreMockRecorder) ApprovePettyCash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePettyCash", reflect.TypeOf((*MockStore)(nil).ApprovePettyCash), ctx, arg)
}

// ApprovePettyCashWithAudit mocks base method.
func (m *MockStore) ApprovePettyCashWithAudit(ctx context.Context, userID int32, params db.ApprovePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePettyCashWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePettyCashWithAudit indicates an expected call of ApprovePettyCashWithAudit.
func (mr *MockStoreMockRecorder) ApprovePettyCashWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePettyCashWithAudit", reflect.TypeOf((*MockStore)(nil).ApprovePettyCashWithAudit), ctx, userID, params)
}

// ApprovePurchaseOrder mocks base method.
func (m *MockStore) ApprovePurchaseOrder(ctx context.Context, arg db.ApprovePurchaseOrderParams) (db.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePurchaseOrder", ctx, arg)
	ret0, _ := ret[0].(db.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePurchaseOrder indicates an expected call of ApprovePurchaseOrder.
func (mr *MockStoreMockRecorder) ApprovePurchaseOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePurchaseOrder", reflect.TypeOf((*MockStore)(nil).ApprovePurchaseOrder), ctx, arg)
}

// ApprovePurchaseOrderTxn mocks base method.
func (m *MockStore) ApprovePurchaseOrderTxn(ctx context.Context, arg db.ApprovePurchaseOrderParams, userID int32) (db.PurchaseOrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePurchaseOrderTxn", ctx, arg, userID)
	ret0, _ := ret[0].(db.PurchaseOrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApprovePurchaseOrderTxn indicates an expected call of ApprovePurchaseOrderTxn.
func (mr *MockStoreMockRecorder) ApprovePurchaseOrderTxn(ctx, arg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePurchaseOrderTxn", reflect.TypeOf((*MockStore)(nil).ApprovePurchaseOrderTxn), ctx, arg, userID)
}

// CreateBankDetails mocks base method.
func (m *MockStore) CreateBankDetails(ctx context.Context, arg db.CreateBankDetailsParams) (db.BankDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankDetails", ctx, arg)
	ret0, _ := ret[0].(db.BankDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankDetails indicates an expected call of CreateBankDetails.
func (mr *MockStoreMockRecorder) CreateBankDetails(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankDetails", reflect.TypeOf((*MockStore)(nil).CreateBankDetails), ctx, arg)
}

// CreateCar mocks base method.
func (m *MockStore) CreateCar(ctx context.Context, arg db.CreateCarParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", ctx, arg)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockStoreMockRecorder) CreateCar(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockStore)(nil).CreateCar), ctx, arg)
}

// CreateCompany mocks base method.
func (m *MockStore) CreateCompany(ctx context.Context, arg db.CreateCompanyParams) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, arg)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStoreMockRecorder) CreateCompany(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStore)(nil).CreateCompany), ctx, arg)
}

// CreateFuelConsumption mocks base method.
func (m *MockStore) CreateFuelConsumption(ctx context.Context, arg db.CreateFuelConsumptionParams) (db.CarFuelConsumption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFuelConsumption", ctx, arg)
	ret0, _ := ret[0].(db.CarFuelConsumption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFuelConsumption indicates an expected call of CreateFuelConsumption.
func (mr *MockStoreMockRecorder) CreateFuelConsumption(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFuelConsumption", reflect.TypeOf((*MockStore)(nil).CreateFuelConsumption), ctx, arg)
}

// CreateInvoice mocks base method.
func (m *MockStore) CreateInvoice(ctx context.Context, arg db.CreateInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockStoreMockRecorder) CreateInvoice(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockStore)(nil).CreateInvoice), ctx, arg)
}

// CreateInvoiceItem mocks base method.
func (m *MockStore) CreateInvoiceItem(ctx context.Context, arg db.CreateInvoiceItemParams) (db.InvoiceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceItem", ctx, arg)
	ret0, _ := ret[0].(db.InvoiceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceItem indicates an expected call of CreateInvoiceItem.
func (mr *MockStoreMockRecorder) CreateInvoiceItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceItem", reflect.TypeOf((*MockStore)(nil).CreateInvoiceItem), ctx, arg)
}

// CreateInvoiceTxn mocks base method.
func (m *MockStore) CreateInvoiceTxn(ctx context.Context, userID int32, arg1 db.CreateInvoiceParams, arg2 []db.CreateInvoiceItemParams) (db.InvoiceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceTxn", ctx, userID, arg1, arg2)
	ret0, _ := ret[0].(db.InvoiceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceTxn indicates an expected call of CreateInvoiceTxn.
func (mr *MockStoreMockRecorder) CreateInvoiceTxn(ctx, userID, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceTxn", reflect.TypeOf((*MockStore)(nil).CreateInvoiceTxn), ctx, userID, arg1, arg2)
}

// CreatePaymentRequest mocks base method.
func (m *MockStore) CreatePaymentRequest(ctx context.Context, arg db.CreatePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentRequest", ctx, arg)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentRequest indicates an expected call of CreatePaymentRequest.
func (mr *MockStoreMockRecorder) CreatePaymentRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentRequest", reflect.TypeOf((*MockStore)(nil).CreatePaymentRequest), ctx, arg)
}

// CreatePaymentRequestWithAudit mocks base method.
func (m *MockStore) CreatePaymentRequestWithAudit(ctx context.Context, userID int32, params db.CreatePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentRequestWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentRequestWithAudit indicates an expected call of CreatePaymentRequestWithAudit.
func (mr *MockStoreMockRecorder) CreatePaymentRequestWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentRequestWithAudit", reflect.TypeOf((*MockStore)(nil).CreatePaymentRequestWithAudit), ctx, userID, params)
}

// CreatePettyCash mocks base method.
func (m *MockStore) CreatePettyCash(ctx context.Context, arg db.CreatePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePettyCash", ctx, arg)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePettyCash indicates an expected call of CreatePettyCash.
func (mr *MockStoreMockRecorder) CreatePettyCash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePettyCash", reflect.TypeOf((*MockStore)(nil).CreatePettyCash), ctx, arg)
}

// CreatePettyCashWithAudit mocks base method.
func (m *MockStore) CreatePettyCashWithAudit(ctx context.Context, userID int32, params db.CreatePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePettyCashWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePettyCashWithAudit indicates an expected call of CreatePettyCashWithAudit.
func (mr *MockStoreMockRecorder) CreatePettyCashWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePettyCashWithAudit", reflect.TypeOf((*MockStore)(nil).CreatePettyCashWithAudit), ctx, userID, params)
}

// CreatePurchaseOrder mocks base method.
func (m *MockStore) CreatePurchaseOrder(ctx context.Context, arg db.CreatePurchaseOrderParams) (db.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchaseOrder", ctx, arg)
	ret0, _ := ret[0].(db.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchaseOrder indicates an expected call of CreatePurchaseOrder.
func (mr *MockStoreMockRecorder) CreatePurchaseOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchaseOrder", reflect.TypeOf((*MockStore)(nil).CreatePurchaseOrder), ctx, arg)
}

// CreatePurchaseOrderItem mocks base method.
func (m *MockStore) CreatePurchaseOrderItem(ctx context.Context, arg db.CreatePurchaseOrderItemParams) (db.PurchaseOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchaseOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.PurchaseOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchaseOrderItem indicates an expected call of CreatePurchaseOrderItem.
func (mr *MockStoreMockRecorder) CreatePurchaseOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchaseOrderItem", reflect.TypeOf((*MockStore)(nil).CreatePurchaseOrderItem), ctx, arg)
}

// CreatePurchaseOrderTxn mocks base method.
func (m *MockStore) CreatePurchaseOrderTxn(ctx context.Context, arg db.CreatePurchaseOrderTxParams, userID int32) (db.PurchaseOrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchaseOrderTxn", ctx, arg, userID)
	ret0, _ := ret[0].(db.PurchaseOrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchaseOrderTxn indicates an expected call of CreatePurchaseOrderTxn.
func (mr *MockStoreMockRecorder) CreatePurchaseOrderTxn(ctx, arg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchaseOrderTxn", reflect.TypeOf((*MockStore)(nil).CreatePurchaseOrderTxn), ctx, arg, userID)
}

// CreateQuotation mocks base method.
func (m *MockStore) CreateQuotation(ctx context.Context, arg db.CreateQuotationParams) (db.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotation", ctx, arg)
	ret0, _ := ret[0].(db.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotation indicates an expected call of CreateQuotation.
func (mr *MockStoreMockRecorder) CreateQuotation(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotation", reflect.TypeOf((*MockStore)(nil).CreateQuotation), ctx, arg)
}

// CreateQuotationItem mocks base method.
func (m *MockStore) CreateQuotationItem(ctx context.Context, arg db.CreateQuotationItemParams) (db.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotationItem", ctx, arg)
	ret0, _ := ret[0].(db.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotationItem indicates an expected call of CreateQuotationItem.
func (mr *MockStoreMockRecorder) CreateQuotationItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotationItem", reflect.TypeOf((*MockStore)(nil).CreateQuotationItem), ctx, arg)
}

// CreateQuotationTxn mocks base method.
func (m *MockStore) CreateQuotationTxn(ctx context.Context, userID int32, arg db.CreateQuotationTxParams) (db.QuotationTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotationTxn", ctx, userID, arg)
	ret0, _ := ret[0].(db.QuotationTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotationTxn indicates an expected call of CreateQuotationTxn.
func (mr *MockStoreMockRecorder) CreateQuotationTxn(ctx, userID, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotationTxn", reflect.TypeOf((*MockStore)(nil).CreateQuotationTxn), ctx, userID, arg)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(ctx context.Context, arg db.CreateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, arg)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), ctx, arg)
}

// CreateSignatory mocks base method.
func (m *MockStore) CreateSignatory(ctx context.Context, arg db.CreateSignatoryParams) (db.Signatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignatory", ctx, arg)
	ret0, _ := ret[0].(db.Signatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSignatory indicates an expected call of CreateSignatory.
func (mr *MockStoreMockRecorder) CreateSignatory(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignatory", reflect.TypeOf((*MockStore)(nil).CreateSignatory), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// CreateUserRoles mocks base method.
func (m *MockStore) CreateUserRoles(ctx context.Context, arg db.CreateUserRolesParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRoles", ctx, arg)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRoles indicates an expected call of CreateUserRoles.
func (mr *MockStoreMockRecorder) CreateUserRoles(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRoles", reflect.TypeOf((*MockStore)(nil).CreateUserRoles), ctx, arg)
}

// DeleteCompanyByName mocks base method.
func (m *MockStore) DeleteCompanyByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompanyByName indicates an expected call of DeleteCompanyByName.
func (mr *MockStoreMockRecorder) DeleteCompanyByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyByName", reflect.TypeOf((*MockStore)(nil).DeleteCompanyByName), ctx, name)
}

// DeletePaymentRequest mocks base method.
func (m *MockStore) DeletePaymentRequest(ctx context.Context, requestID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentRequest", ctx, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentRequest indicates an expected call of DeletePaymentRequest.
func (mr *MockStoreMockRecorder) DeletePaymentRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentRequest", reflect.TypeOf((*MockStore)(nil).DeletePaymentRequest), ctx, requestID)
}

// DeletePaymentRequestWithAudit mocks base method.
func (m *MockStore) DeletePaymentRequestWithAudit(ctx context.Context, userID, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentRequestWithAudit", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentRequestWithAudit indicates an expected call of DeletePaymentRequestWithAudit.
func (mr *MockStoreMockRecorder) DeletePaymentRequestWithAudit(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentRequestWithAudit", reflect.TypeOf((*MockStore)(nil).DeletePaymentRequestWithAudit), ctx, userID, id)
}

// DeletePettyCash mocks base method.
func (m *MockStore) DeletePettyCash(ctx context.Context, transactionID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePettyCash", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePettyCash indicates an expected call of DeletePettyCash.
func (mr *MockStoreMockRecorder) DeletePettyCash(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePettyCash", reflect.TypeOf((*MockStore)(nil).DeletePettyCash), ctx, transactionID)
}

// DeletePettyCashWithAudit mocks base method.
func (m *MockStore) DeletePettyCashWithAudit(ctx context.Context, userID, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePettyCashWithAudit", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePettyCashWithAudit indicates an expected call of DeletePettyCashWithAudit.
func (mr *MockStoreMockRecorder) DeletePettyCashWithAudit(ctx, userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePettyCashWithAudit", reflect.TypeOf((*MockStore)(nil).DeletePettyCashWithAudit), ctx, userID, id)
}

// DeleteRole mocks base method.
func (m *MockStore) DeleteRole(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStoreMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStore)(nil).DeleteRole), ctx, id)
}

// DeleteSignatoryByName mocks base method.
func (m *MockStore) DeleteSignatoryByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignatoryByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSignatoryByName indicates an expected call of DeleteSignatoryByName.
func (mr *MockStoreMockRecorder) DeleteSignatoryByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignatoryByName", reflect.TypeOf((*MockStore)(nil).DeleteSignatoryByName), ctx, name)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// DeleteUserRoles mocks base method.
func (m *MockStore) DeleteUserRoles(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRoles", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRoles indicates an expected call of DeleteUserRoles.
func (mr *MockStoreMockRecorder) DeleteUserRoles(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRoles", reflect.TypeOf((*MockStore)(nil).DeleteUserRoles), ctx, userID)
}

// DeleteUserRolesByRole mocks base method.
func (m *MockStore) DeleteUserRolesByRole(ctx context.Context, roleID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRolesByRole", ctx, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRolesByRole indicates an expected call of DeleteUserRolesByRole.
func (mr *MockStoreMockRecorder) DeleteUserRolesByRole(ctx, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRolesByRole", reflect.TypeOf((*MockStore)(nil).DeleteUserRolesByRole), ctx, roleID)
}

// GetBankDetailsByAccountNumber mocks base method.
func (m *MockStore) GetBankDetailsByAccountNumber(ctx context.Context, accountNumber string) (db.BankDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankDetailsByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(db.BankDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankDetailsByAccountNumber indicates an expected call of GetBankDetailsByAccountNumber.
func (mr *MockStoreMockRecorder) GetBankDetailsByAccountNumber(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankDetailsByAccountNumber", reflect.TypeOf((*MockStore)(nil).GetBankDetailsByAccountNumber), ctx, accountNumber)
}

// GetBankInfoByID mocks base method.
func (m *MockStore) GetBankInfoByID(ctx context.Context, id int32) (db.BankDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankInfoByID", ctx, id)
	ret0, _ := ret[0].(db.BankDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankInfoByID indicates an expected call of GetBankInfoByID.
func (mr *MockStoreMockRecorder) GetBankInfoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankInfoByID", reflect.TypeOf((*MockStore)(nil).GetBankInfoByID), ctx, id)
}

// GetCarById mocks base method.
func (m *MockStore) GetCarById(ctx context.Context, id int32) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarById", ctx, id)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarById indicates an expected call of GetCarById.
func (mr *MockStoreMockRecorder) GetCarById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarById", reflect.TypeOf((*MockStore)(nil).GetCarById), ctx, id)
}

// GetCars mocks base method.
func (m *MockStore) GetCars(ctx context.Context, arg db.GetCarsParams) ([]db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCars", ctx, arg)
	ret0, _ := ret[0].([]db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCars indicates an expected call of GetCars.
func (mr *MockStoreMockRecorder) GetCars(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCars", reflect.TypeOf((*MockStore)(nil).GetCars), ctx, arg)
}

// GetCompanyByID mocks base method.
func (m *MockStore) GetCompanyByID(ctx context.Context, id int64) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", ctx, id)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockStoreMockRecorder) GetCompanyByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockStore)(nil).GetCompanyByID), ctx, id)
}

// GetConsumptionByCar mocks base method.
func (m *MockStore) GetConsumptionByCar(ctx context.Context, carID int32) ([]db.CarFuelConsumption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumptionByCar", ctx, carID)
	ret0, _ := ret[0].([]db.CarFuelConsumption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumptionByCar indicates an expected call of GetConsumptionByCar.
func (mr *MockStoreMockRecorder) GetConsumptionByCar(ctx, carID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumptionByCar", reflect.TypeOf((*MockStore)(nil).GetConsumptionByCar), ctx, carID)
}

// GetConsumptionByCarAndDateRange mocks base method.
func (m *MockStore) GetConsumptionByCarAndDateRange(ctx context.Context, arg db.GetConsumptionByCarAndDateRangeParams) ([]db.CarFuelConsumption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumptionByCarAndDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.CarFuelConsumption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumptionByCarAndDateRange indicates an expected call of GetConsumptionByCarAndDateRange.
func (mr *MockStoreMockRecorder) GetConsumptionByCarAndDateRange(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumptionByCarAndDateRange", reflect.TypeOf((*MockStore)(nil).GetConsumptionByCarAndDateRange), ctx, arg)
}

// GetConsumptions mocks base method.
func (m *MockStore) GetConsumptions(ctx context.Context, arg db.GetConsumptionsParams) ([]db.CarFuelConsumption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumptions", ctx, arg)
	ret0, _ := ret[0].([]db.CarFuelConsumption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumptions indicates an expected call of GetConsumptions.
func (mr *MockStoreMockRecorder) GetConsumptions(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumptions", reflect.TypeOf((*MockStore)(nil).GetConsumptions), ctx, arg)
}

// GetInvoiceById mocks base method.
func (m *MockStore) GetInvoiceById(ctx context.Context, id int32) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceById", ctx, id)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceById indicates an expected call of GetInvoiceById.
func (mr *MockStoreMockRecorder) GetInvoiceById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceById", reflect.TypeOf((*MockStore)(nil).GetInvoiceById), ctx, id)
}

// GetInvoiceItemsByInvoiceID mocks base method.
func (m *MockStore) GetInvoiceItemsByInvoiceID(ctx context.Context, invoiceID int32) ([]db.InvoiceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceItemsByInvoiceID", ctx, invoiceID)
	ret0, _ := ret[0].([]db.InvoiceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceItemsByInvoiceID indicates an expected call of GetInvoiceItemsByInvoiceID.
func (mr *MockStoreMockRecorder) GetInvoiceItemsByInvoiceID(ctx, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceItemsByInvoiceID", reflect.TypeOf((*MockStore)(nil).GetInvoiceItemsByInvoiceID), ctx, invoiceID)
}

// GetInvoicesByPurchaseOrderNumber mocks base method.
func (m *MockStore) GetInvoicesByPurchaseOrderNumber(ctx context.Context, purchaseOrderNumber string) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoicesByPurchaseOrderNumber", ctx, purchaseOrderNumber)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoicesByPurchaseOrderNumber indicates an expected call of GetInvoicesByPurchaseOrderNumber.
func (mr *MockStoreMockRecorder) GetInvoicesByPurchaseOrderNumber(ctx, purchaseOrderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoicesByPurchaseOrderNumber", reflect.TypeOf((*MockStore)(nil).GetInvoicesByPurchaseOrderNumber), ctx, purchaseOrderNumber)
}

// GetPaymentRequest mocks base method.
func (m *MockStore) GetPaymentRequest(ctx context.Context, requestID int32) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentRequest", ctx, requestID)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentRequest indicates an expected call of GetPaymentRequest.
func (mr *MockStoreMockRecorder) GetPaymentRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentRequest", reflect.TypeOf((*MockStore)(nil).GetPaymentRequest), ctx, requestID)
}

// GetPettyCash mocks base method.
func (m *MockStore) GetPettyCash(ctx context.Context, transactionID int32) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPettyCash", ctx, transactionID)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPettyCash indicates an expected call of GetPettyCash.
func (mr *MockStoreMockRecorder) GetPettyCash(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPettyCash", reflect.TypeOf((*MockStore)(nil).GetPettyCash), ctx, transactionID)
}

// GetPurchaseOrder mocks base method.
func (m *MockStore) GetPurchaseOrder(ctx context.Context, id int32) (db.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchaseOrder", ctx, id)
	ret0, _ := ret[0].(db.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchaseOrder indicates an expected call of GetPurchaseOrder.
func (mr *MockStoreMockRecorder) GetPurchaseOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchaseOrder", reflect.TypeOf((*MockStore)(nil).GetPurchaseOrder), ctx, id)
}

// GetPurchaseOrderItemsByPurchaseOrderID mocks base method.
func (m *MockStore) GetPurchaseOrderItemsByPurchaseOrderID(ctx context.Context, purchaseOrderID int32) ([]db.PurchaseOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchaseOrderItemsByPurchaseOrderID", ctx, purchaseOrderID)
	ret0, _ := ret[0].([]db.PurchaseOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchaseOrderItemsByPurchaseOrderID indicates an expected call of GetPurchaseOrderItemsByPurchaseOrderID.
func (mr *MockStoreMockRecorder) GetPurchaseOrderItemsByPurchaseOrderID(ctx, purchaseOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchaseOrderItemsByPurchaseOrderID", reflect.TypeOf((*MockStore)(nil).GetPurchaseOrderItemsByPurchaseOrderID), ctx, purchaseOrderID)
}

// GetQuotationByID mocks base method.
func (m *MockStore) GetQuotationByID(ctx context.Context, id int32) (db.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationByID", ctx, id)
	ret0, _ := ret[0].(db.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationByID indicates an expected call of GetQuotationByID.
func (mr *MockStoreMockRecorder) GetQuotationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationByID", reflect.TypeOf((*MockStore)(nil).GetQuotationByID), ctx, id)
}

// GetQuotationItemsByQuotationID mocks base method.
func (m *MockStore) GetQuotationItemsByQuotationID(ctx context.Context, quotationID int32) ([]db.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationItemsByQuotationID", ctx, quotationID)
	ret0, _ := ret[0].([]db.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationItemsByQuotationID indicates an expected call of GetQuotationItemsByQuotationID.
func (mr *MockStoreMockRecorder) GetQuotationItemsByQuotationID(ctx, quotationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationItemsByQuotationID", reflect.TypeOf((*MockStore)(nil).GetQuotationItemsByQuotationID), ctx, quotationID)
}

// GetRole mocks base method.
func (m *MockStore) GetRole(ctx context.Context, id int64) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockStoreMockRecorder) GetRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockStore)(nil).GetRole), ctx, id)
}

// GetSessionByID mocks base method.
func (m *MockStore) GetSessionByID(ctx context.Context, id uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, id)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockStoreMockRecorder) GetSessionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockStore)(nil).GetSessionByID), ctx, id)
}

// GetSignatoryById mocks base method.
func (m *MockStore) GetSignatoryById(ctx context.Context, id int64) (db.Signatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatoryById", ctx, id)
	ret0, _ := ret[0].(db.Signatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatoryById indicates an expected call of GetSignatoryById.
func (mr *MockStoreMockRecorder) GetSignatoryById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatoryById", reflect.TypeOf((*MockStore)(nil).GetSignatoryById), ctx, id)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(ctx context.Context, id int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), ctx, id)
}

// GetUserByUserNameOrEmail mocks base method.
func (m *MockStore) GetUserByUserNameOrEmail(ctx context.Context, arg db.GetUserByUserNameOrEmailParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserNameOrEmail", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserNameOrEmail indicates an expected call of GetUserByUserNameOrEmail.
func (mr *MockStoreMockRecorder) GetUserByUserNameOrEmail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserNameOrEmail", reflect.TypeOf((*MockStore)(nil).GetUserByUserNameOrEmail), ctx, arg)
}

// GetUserRole mocks base method.
func (m *MockStore) GetUserRole(ctx context.Context, arg db.GetUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, arg)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockStoreMockRecorder) GetUserRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockStore)(nil).GetUserRole), ctx, arg)
}

// GetUserRoles mocks base method.
func (m *MockStore) GetUserRoles(ctx context.Context, userID int64) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", ctx, userID)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStoreMockRecorder) GetUserRoles(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStore)(nil).GetUserRoles), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(ctx context.Context, arg db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, arg)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), ctx, arg)
}

// ListBankDetailsByBankName mocks base method.
func (m *MockStore) ListBankDetailsByBankName(ctx context.Context, bankName string) ([]db.BankDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankDetailsByBankName", ctx, bankName)
	ret0, _ := ret[0].([]db.BankDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBankDetailsByBankName indicates an expected call of ListBankDetailsByBankName.
func (mr *MockStoreMockRecorder) ListBankDetailsByBankName(ctx, bankName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankDetailsByBankName", reflect.TypeOf((*MockStore)(nil).ListBankDetailsByBankName), ctx, bankName)
}

// ListBanks mocks base method.
func (m *MockStore) ListBanks(ctx context.Context) ([]db.BankDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBanks", ctx)
	ret0, _ := ret[0].([]db.BankDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBanks indicates an expected call of ListBanks.
func (mr *MockStoreMockRecorder) ListBanks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBanks", reflect.TypeOf((*MockStore)(nil).ListBanks), ctx)
}

// ListCompanies mocks base method.
func (m *MockStore) ListCompanies(ctx context.Context, arg db.ListCompaniesParams) ([]db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanies", ctx, arg)
	ret0, _ := ret[0].([]db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompanies indicates an expected call of ListCompanies.
func (mr *MockStoreMockRecorder) ListCompanies(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanies", reflect.TypeOf((*MockStore)(nil).ListCompanies), ctx, arg)
}

// ListEmployeePaymentRequests mocks base method.
func (m *MockStore) ListEmployeePaymentRequests(ctx context.Context, arg db.ListEmployeePaymentRequestsParams) ([]db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeePaymentRequests", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeePaymentRequests indicates an expected call of ListEmployeePaymentRequests.
func (mr *MockStoreMockRecorder) ListEmployeePaymentRequests(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeePaymentRequests", reflect.TypeOf((*MockStore)(nil).ListEmployeePaymentRequests), ctx, arg)
}

// ListEmployeePettyCash mocks base method.
func (m *MockStore) ListEmployeePettyCash(ctx context.Context, arg db.ListEmployeePettyCashParams) ([]db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeePettyCash", ctx, arg)
	ret0, _ := ret[0].([]db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeePettyCash indicates an expected call of ListEmployeePettyCash.
func (mr *MockStoreMockRecorder) ListEmployeePettyCash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeePettyCash", reflect.TypeOf((*MockStore)(nil).ListEmployeePettyCash), ctx, arg)
}

// ListInvoiceItemsByInvoiceID mocks base method.
func (m *MockStore) ListInvoiceItemsByInvoiceID(ctx context.Context, invoiceID int32) ([]db.InvoiceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoiceItemsByInvoiceID", ctx, invoiceID)
	ret0, _ := ret[0].([]db.InvoiceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoiceItemsByInvoiceID indicates an expected call of ListInvoiceItemsByInvoiceID.
func (mr *MockStoreMockRecorder) ListInvoiceItemsByInvoiceID(ctx, invoiceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoiceItemsByInvoiceID", reflect.TypeOf((*MockStore)(nil).ListInvoiceItemsByInvoiceID), ctx, invoiceID)
}

// ListInvoices mocks base method.
func (m *MockStore) ListInvoices(ctx context.Context, arg db.ListInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockStoreMockRecorder) ListInvoices(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockStore)(nil).ListInvoices), ctx, arg)
}

// ListPaymentRequests mocks base method.
func (m *MockStore) ListPaymentRequests(ctx context.Context, arg db.ListPaymentRequestsParams) ([]db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentRequests", ctx, arg)
	ret0, _ := ret[0].([]db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentRequests indicates an expected call of ListPaymentRequests.
func (mr *MockStoreMockRecorder) ListPaymentRequests(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentRequests", reflect.TypeOf((*MockStore)(nil).ListPaymentRequests), ctx, arg)
}

// ListPettyCash mocks base method.
func (m *MockStore) ListPettyCash(ctx context.Context, arg db.ListPettyCashParams) ([]db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPettyCash", ctx, arg)
	ret0, _ := ret[0].([]db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPettyCash indicates an expected call of ListPettyCash.
func (mr *MockStoreMockRecorder) ListPettyCash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPettyCash", reflect.TypeOf((*MockStore)(nil).ListPettyCash), ctx, arg)
}

// ListPurchaseOrderItemsByPurchaseOrderID mocks base method.
func (m *MockStore) ListPurchaseOrderItemsByPurchaseOrderID(ctx context.Context, purchaseOrderID int32) ([]db.PurchaseOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPurchaseOrderItemsByPurchaseOrderID", ctx, purchaseOrderID)
	ret0, _ := ret[0].([]db.PurchaseOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPurchaseOrderItemsByPurchaseOrderID indicates an expected call of ListPurchaseOrderItemsByPurchaseOrderID.
func (mr *MockStoreMockRecorder) ListPurchaseOrderItemsByPurchaseOrderID(ctx, purchaseOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPurchaseOrderItemsByPurchaseOrderID", reflect.TypeOf((*MockStore)(nil).ListPurchaseOrderItemsByPurchaseOrderID), ctx, purchaseOrderID)
}

// ListPurchaseOrders mocks base method.
func (m *MockStore) ListPurchaseOrders(ctx context.Context, arg db.ListPurchaseOrdersParams) ([]db.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPurchaseOrders", ctx, arg)
	ret0, _ := ret[0].([]db.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPurchaseOrders indicates an expected call of ListPurchaseOrders.
func (mr *MockStoreMockRecorder) ListPurchaseOrders(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPurchaseOrders", reflect.TypeOf((*MockStore)(nil).ListPurchaseOrders), ctx, arg)
}

// ListQuotationItemsByQuotationID mocks base method.
func (m *MockStore) ListQuotationItemsByQuotationID(ctx context.Context, quotationID int32) ([]db.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotationItemsByQuotationID", ctx, quotationID)
	ret0, _ := ret[0].([]db.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotationItemsByQuotationID indicates an expected call of ListQuotationItemsByQuotationID.
func (mr *MockStoreMockRecorder) ListQuotationItemsByQuotationID(ctx, quotationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotationItemsByQuotationID", reflect.TypeOf((*MockStore)(nil).ListQuotationItemsByQuotationID), ctx, quotationID)
}

// ListQuotations mocks base method.
func (m *MockStore) ListQuotations(ctx context.Context, arg db.ListQuotationsParams) ([]db.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotations", ctx, arg)
	ret0, _ := ret[0].([]db.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotations indicates an expected call of ListQuotations.
func (mr *MockStoreMockRecorder) ListQuotations(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotations", reflect.TypeOf((*MockStore)(nil).ListQuotations), ctx, arg)
}

// ListRoles mocks base method.
func (m *MockStore) ListRoles(ctx context.Context, arg db.ListRolesParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx, arg)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockStoreMockRecorder) ListRoles(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockStore)(nil).ListRoles), ctx, arg)
}

// ListSignatories mocks base method.
func (m *MockStore) ListSignatories(ctx context.Context, arg db.ListSignatoriesParams) ([]db.Signatory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignatories", ctx, arg)
	ret0, _ := ret[0].([]db.Signatory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignatories indicates an expected call of ListSignatories.
func (mr *MockStoreMockRecorder) ListSignatories(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignatories", reflect.TypeOf((*MockStore)(nil).ListSignatories), ctx, arg)
}

// ListSiteInvoices mocks base method.
func (m *MockStore) ListSiteInvoices(ctx context.Context, arg db.ListSiteInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSiteInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSiteInvoices indicates an expected call of ListSiteInvoices.
func (mr *MockStoreMockRecorder) ListSiteInvoices(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSiteInvoices", reflect.TypeOf((*MockStore)(nil).ListSiteInvoices), ctx, arg)
}

// ListUserCompanyInvoices mocks base method.
func (m *MockStore) ListUserCompanyInvoices(ctx context.Context, arg db.ListUserCompanyInvoicesParams) ([]db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCompanyInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCompanyInvoices indicates an expected call of ListUserCompanyInvoices.
func (mr *MockStoreMockRecorder) ListUserCompanyInvoices(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCompanyInvoices", reflect.TypeOf((*MockStore)(nil).ListUserCompanyInvoices), ctx, arg)
}

// UpdatePaymentRequest mocks base method.
func (m *MockStore) UpdatePaymentRequest(ctx context.Context, arg db.UpdatePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentRequest", ctx, arg)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentRequest indicates an expected call of UpdatePaymentRequest.
func (mr *MockStoreMockRecorder) UpdatePaymentRequest(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentRequest", reflect.TypeOf((*MockStore)(nil).UpdatePaymentRequest), ctx, arg)
}

// UpdatePaymentRequestWithAudit mocks base method.
func (m *MockStore) UpdatePaymentRequestWithAudit(ctx context.Context, userID int32, params db.UpdatePaymentRequestParams) (db.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentRequestWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentRequestWithAudit indicates an expected call of UpdatePaymentRequestWithAudit.
func (mr *MockStoreMockRecorder) UpdatePaymentRequestWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentRequestWithAudit", reflect.TypeOf((*MockStore)(nil).UpdatePaymentRequestWithAudit), ctx, userID, params)
}

// UpdatePettyCash mocks base method.
func (m *MockStore) UpdatePettyCash(ctx context.Context, arg db.UpdatePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePettyCash", ctx, arg)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePettyCash indicates an expected call of UpdatePettyCash.
func (mr *MockStoreMockRecorder) UpdatePettyCash(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePettyCash", reflect.TypeOf((*MockStore)(nil).UpdatePettyCash), ctx, arg)
}

// UpdatePettyCashWithAudit mocks base method.
func (m *MockStore) UpdatePettyCashWithAudit(ctx context.Context, userID int32, params db.UpdatePettyCashParams) (db.PettyCash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePettyCashWithAudit", ctx, userID, params)
	ret0, _ := ret[0].(db.PettyCash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePettyCashWithAudit indicates an expected call of UpdatePettyCashWithAudit.
func (mr *MockStoreMockRecorder) UpdatePettyCashWithAudit(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePettyCashWithAudit", reflect.TypeOf((*MockStore)(nil).UpdatePettyCashWithAudit), ctx, userID, params)
}

// UpdatePurchaseOrder mocks base method.
func (m *MockStore) UpdatePurchaseOrder(ctx context.Context, arg db.UpdatePurchaseOrderParams) (db.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePurchaseOrder", ctx, arg)
	ret0, _ := ret[0].(db.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePurchaseOrder indicates an expected call of UpdatePurchaseOrder.
func (mr *MockStoreMockRecorder) UpdatePurchaseOrder(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePurchaseOrder", reflect.TypeOf((*MockStore)(nil).UpdatePurchaseOrder), ctx, arg)
}

// UpdatePurchaseOrderItem mocks base method.
func (m *MockStore) UpdatePurchaseOrderItem(ctx context.Context, arg db.UpdatePurchaseOrderItemParams) (db.PurchaseOrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePurchaseOrderItem", ctx, arg)
	ret0, _ := ret[0].(db.PurchaseOrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePurchaseOrderItem indicates an expected call of UpdatePurchaseOrderItem.
func (mr *MockStoreMockRecorder) UpdatePurchaseOrderItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePurchaseOrderItem", reflect.TypeOf((*MockStore)(nil).UpdatePurchaseOrderItem), ctx, arg)
}

// UpdatePurchaseOrderTxn mocks base method.
func (m *MockStore) UpdatePurchaseOrderTxn(ctx context.Context, arg db.UpdatePurchaseOrderTxParams, userID int32) (db.PurchaseOrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePurchaseOrderTxn", ctx, arg, userID)
	ret0, _ := ret[0].(db.PurchaseOrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePurchaseOrderTxn indicates an expected call of UpdatePurchaseOrderTxn.
func (mr *MockStoreMockRecorder) UpdatePurchaseOrderTxn(ctx, arg, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePurchaseOrderTxn", reflect.TypeOf((*MockStore)(nil).UpdatePurchaseOrderTxn), ctx, arg, userID)
}

// UpdateQuotation mocks base method.
func (m *MockStore) UpdateQuotation(ctx context.Context, arg db.UpdateQuotationParams) (db.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotation", ctx, arg)
	ret0, _ := ret[0].(db.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotation indicates an expected call of UpdateQuotation.
func (mr *MockStoreMockRecorder) UpdateQuotation(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotation", reflect.TypeOf((*MockStore)(nil).UpdateQuotation), ctx, arg)
}

// UpdateQuotationItem mocks base method.
func (m *MockStore) UpdateQuotationItem(ctx context.Context, arg db.UpdateQuotationItemParams) (db.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotationItem", ctx, arg)
	ret0, _ := ret[0].(db.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotationItem indicates an expected call of UpdateQuotationItem.
func (mr *MockStoreMockRecorder) UpdateQuotationItem(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotationItem", reflect.TypeOf((*MockStore)(nil).UpdateQuotationItem), ctx, arg)
}

// UpdateQuotationTxn mocks base method.
func (m *MockStore) UpdateQuotationTxn(ctx context.Context, userID int32, arg db.UpdateQuotationTxParams) (db.UpdateQuotationTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotationTxn", ctx, userID, arg)
	ret0, _ := ret[0].(db.UpdateQuotationTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotationTxn indicates an expected call of UpdateQuotationTxn.
func (mr *MockStoreMockRecorder) UpdateQuotationTxn(ctx, userID, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotationTxn", reflect.TypeOf((*MockStore)(nil).UpdateQuotationTxn), ctx, userID, arg)
}

// UpdateRole mocks base method.
func (m *MockStore) UpdateRole(ctx context.Context, arg db.UpdateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, arg)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockStoreMockRecorder) UpdateRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockStore)(nil).UpdateRole), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}

// UpdateUserRoles mocks base method.
func (m *MockStore) UpdateUserRoles(ctx context.Context, arg db.UpdateUserRolesParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoles", ctx, arg)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoles indicates an expected call of UpdateUserRoles.
func (mr *MockStoreMockRecorder) UpdateUserRoles(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoles", reflect.TypeOf((*MockStore)(nil).UpdateUserRoles), ctx, arg)
}
